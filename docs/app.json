[{"name":"app.R","content":"## Author: Edo Danilyan\n## Webpage: https://edodanilyan.com\n# R version 4.4.1 (2024-06-14)\n# Platform: aarch64-apple-darwin20\n# Running under: macOS 15.1\n# https://github.com/danilyanedo7/shinyapp_species_distribution.git\n\nlibrary(shiny)\nlibrary(leaflet)\nlibrary(dplyr)\nlibrary(readr)\nlibrary(bslib)\n\n# Generate dummy data\ngenerate_dummy_data <- function() {\n  species <- c(\"Javan Rhino\",\n               \"Javan Hawk-Eagle\",\n               \"Javan Leopard\",\n               \"Javan Langur\",\n               \"Javan Slow Loris\")\n  sites <- c(\n    \"Ujung Kulon National Park\",\n    \"Mount Gede Pangrango\",\n    \"Meru Betiri National Park\",\n    \"Baluran National Park\",\n    \"Gunung Halimun National Park\"\n  )\n  \n  dummy_data <- data.frame(\n    Species = rep(species, each = 10),\n    Site = rep(rep(sites, each = 2), 5),\n    Observation = rep(1:2, 25),\n    Abundance = sample(3:10, 50, replace = TRUE),\n    stringsAsFactors = FALSE\n  )\n  \n  set.seed(123)\n  dummy_data$lat <- rep(c(-6.78, -6.78, -8.39, -7.85, -6.71),\n                        each = 2,\n                        times = 5) + runif(nrow(dummy_data), -0.01, 0.01)\n  dummy_data$lon <- rep(c(105.38, 106.95, 113.73, 114.37, 106.46),\n                        each = 2,\n                        times = 5) + runif(nrow(dummy_data), -0.01, 0.01)\n  \n  dummy_data$Conservation_Status <- c(\n    rep(\"Critically Endangered\", 10),\n    rep(\"Endangered\", 10),\n    rep(\"Vulnerable\", 10),\n    rep(\"Near Threatened\", 10),\n    rep(\"Endangered\", 10)\n  )\n  \n  dummy_data$Habitat_Type <- rep(\n    c(\n      \"Tropical Rainforest\",\n      \"Montane Forest\",\n      \"Coastal Forest\",\n      \"Savanna\",\n      \"Cloud Forest\"\n    ),\n    each = 2,\n    times = 5\n  )\n  \n  dummy_data$Endangered_Indicator <- ifelse(dummy_data$Conservation_Status == \"Critically Endangered\",\n                                            1,\n                                            0)\n  return(dummy_data)\n}\n\nui <- page_sidebar(\n  theme = bs_theme(version = 5, bootswatch = \"flatly\"),\n  title = \"Species Distribution Map\",\n  sidebar = sidebar(\n    fileInput(\n      \"species_file\",\n      \"Upload Species Data CSV\",\n      accept = c(\"text/csv\", \"text/comma-separated-values,text/plain\", \".csv\")\n    ),\n    checkboxInput(\"use_dummy_data\", \"Use Dummy Data\", value = TRUE),\n    numericInput(\n      \"center_lat\",\n      \"Center Latitude\",\n      value = -7.0,\n      min = -90,\n      max = 90\n    ),\n    numericInput(\n      \"center_lon\",\n      \"Center Longitude\",\n      value = 110.0,\n      min = -180,\n      max = 180\n    ),\n    actionButton(\"update_map\", \"Update Map\", class = \"btn-primary\")\n  ),\n  leafletOutput(\"map\"),\n  # Footer with attribution\n  tags$footer(\n    p(\n      \"This Shiny app was created by Edo Danilyan at edodanilyan.com. Please provide attribution if you use or modify it.\"\n    ),\n    style = \"text-align: center; padding: 8px; background-color: #f8f9fa; font-size: 0.6em;\"\n  )\n)\n\nserver <- function(input, output, session) {\n  # Reactive values for center coordinates\n  center_coords <- reactiveVal(c(-7.833, 114.367))\n  \n  # Reactive value for species data\n  species_data <- reactive({\n    if (input$use_dummy_data) {\n      generate_dummy_data()\n    } else {\n      req(input$species_file)\n      tryCatch(\n        read_csv(input$species_file$datapath),\n        error = function(e) {\n          showNotification(\"Error reading CSV file. Please check the file format.\",\n                           type = \"error\")\n          NULL\n        }\n      )\n    }\n  })\n  \n  # Update center coordinates when button is clicked\n  observeEvent(input$update_map, {\n    center_coords(c(input$center_lat, input$center_lon))\n  })\n  \n  # Create the map\n  output$map <- renderLeaflet({\n    req(species_data())\n    data <- species_data()\n    \n    leaflet() %>%\n      addProviderTiles(\"Esri.WorldStreetMap\") %>%\n      setView(lng = center_coords()[2],\n              lat = center_coords()[1],\n              zoom = 6) %>%\n      addCircles(\n        data = data,\n        lat = ~ lat,\n        lng = ~ lon,\n        color = \"#F60D1D\",\n        fillColor = \"#F60D1D\",\n        fillOpacity = 0.25,\n        popup = ~ paste0(\n          \"<strong>Species: <\/strong>\",\n          Species,\n          \"<br>\",\n          \"<strong>Site: <\/strong>\",\n          Site,\n          \"<br>\",\n          \"<strong>Abundance: <\/strong>\",\n          Abundance,\n          \"<br>\",\n          \"<strong>Conservation Status: <\/strong>\",\n          Conservation_Status,\n          \"<br>\",\n          \"<strong>Habitat Type: <\/strong>\",\n          Habitat_Type\n        )\n      )\n  })\n  \n  # Update map view when center coordinates change\n  observe({\n    leafletProxy(\"map\") %>%\n      setView(lng = center_coords()[2],\n              lat = center_coords()[1],\n              zoom = 6)\n  })\n}\n\nshinyApp(ui, server)\n","type":"text"}]
